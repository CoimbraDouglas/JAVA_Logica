# üìò Algoritmos de Ordena√ß√£o e Estrutura de Heap

**Disciplina:** Linguagens de Programa√ß√£o
**Professor:** Fabr√≠cio Rodrigues In√°cio

---

## üìÇ Estrutura do Projeto

Este programa, no arquivo `insercao.java`, implementa dois algoritmos fundamentais em estruturas de dados e ordena√ß√£o:

* **Ordena√ß√£o por Inser√ß√£o (Insertion Sort)**
* **Constru√ß√£o de Heap M√°ximo (Max Heap)**

---

## üìù Descri√ß√£o dos Algoritmos

### 1. **Ordena√ß√£o por Inser√ß√£o (Insertion Sort)**

* Percorre o vetor a partir da segunda posi√ß√£o.
* Para cada elemento, desloca os maiores valores √† direita at√© encontrar a posi√ß√£o correta.
* Insere o valor na posi√ß√£o adequada.
* Resultado: vetor ordenado em ordem crescente.

### 2. **Constru√ß√£o de Heap M√°ximo (Max Heap)**

* `aplicarHeap`: garante que o n√≥ pai seja maior que seus filhos, trocando-os quando necess√°rio.
* `construirHeap`: percorre o vetor da metade para o in√≠cio, ajustando cada sub√°rvore para manter a estrutura de heap m√°ximo.
* O resultado √© um vetor transformado em **heap bin√°rio m√°ximo**, usado como base para o algoritmo **HeapSort**.

---

## ‚ö†Ô∏è Observa√ß√µes Importantes

* O c√≥digo possui pequenos ajustes necess√°rios:

  * Dentro de `construirHeap`, n√£o √© necess√°rio redeclarar `int n = vetor.length;` se j√° for passado como par√¢metro.
  * Na chamada `aplicarHeap((vetor, n, i));`, os par√™nteses extras devem ser removidos.
  * No `main`, ao imprimir o vetor original, deve-se usar `VET1[i]` em vez de `VET1`.

Esses ajustes permitem que o programa rode corretamente tanto para a ordena√ß√£o por inser√ß√£o quanto para a constru√ß√£o do heap.

---

## üîë Conceitos Refor√ßados

* Ordena√ß√£o incremental (**inser√ß√£o**).
* Estruturas baseadas em **√°rvores bin√°rias** (heap).
* Manipula√ß√£o de √≠ndices em vetores.
* Corre√ß√£o de erros comuns em implementa√ß√£o de algoritmos em Java.

---
